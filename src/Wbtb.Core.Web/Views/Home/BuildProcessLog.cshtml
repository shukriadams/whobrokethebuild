@using Wbtb.Core.Common;
@using Wbtb.Core.Web;
@model BuildProcessPageModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@await Html.PartialAsync("JobBanner", Model.Banner )

<div>
    Build : @ViewHelpers.BuildLink(Model.Build)
</div>
<div>
    @if (Model.IsComplete)
    {
        <x-badge class="--success">Completed</x-badge>
    }
    else
    {
        <x-badge class="--warning">Pending</x-badge>
    }

    @if (Model.HasErrors)
    {
        <x-badge class="--danger">Has errors</x-badge>
    }
    
    @if (Model.IsComplete && Model.QueueTime.HasValue)
    {
        <div>
            Processing time : @Model.QueueTime.ToHumanString()
        </div>    
    }
    
    @if (!Model.IsComplete && Model.QueueTime.HasValue)
    {
        <div>
            In queue for : @Model.QueueTime.ToHumanString()
        </div>
    }
</div>

@if (Model.DaemonTasks.Any())
{
    <x-list class="daemonTasks --dense">

        <x-list-row class="--header">
            <x-list-cell>
                Created
            </x-list-cell>
            <x-list-cell>
                Completed
            </x-list-cell>
            <x-list-cell>
                Key
                <div class="quiet">
                    Source
                </div>
            </x-list-cell>
            <x-list-cell>
                Result
            </x-list-cell>
        </x-list-row>

        @foreach (ViewDaemonTask task in Model.DaemonTasks)
        {
            <x-list-row>
                <x-list-cell>
                    @task.CreatedUtc.Ago() ago <div class="quiet">(@task.CreatedUtc.ToHumanString())</div>
                </x-list-cell>
                <x-list-cell>
                    @if (task.ProcessedUtc.HasValue)
                    {
                        @if (!task.HasPassed.Value)
                        {
                            <x-badge class="--danger">Failed</x-badge>
                        }

                        <text>
                            @task.ProcessedUtc.Ago() ago
                            <div class="quiet">(@task.ProcessedUtc.ToHumanString())</div>
                        </text>

                        <div class="quiet">Queued for @((task.ProcessedUtc - task.CreatedUtc).ToHumanString(shorten: true))</div>
                    }
                    else
                    {
                        <text>
                            Pending
                        </text>
                        <div class="quiet">Queued for @((DateTime.UtcNow - task.CreatedUtc).ToHumanString(shorten: true))</div>
                    }
                </x-list-cell>
                <x-list-cell>
                    @((DaemonTaskTypes)task.Stage)
                    <div class="quiet">
                        @task.Src
                    </div>
                    <div class="quiet">
                        @task.Args
                    </div>
                </x-list-cell>
                <x-list-cell class="quiet">
                    @task.Result
                    
                    @if (task.BlockedProcess != null)
                    {
                        <text>BLOCKED by taskid:@task.BlockedProcess.Task.Id</text>
                    }

                    @if (task.ActiveProcess != null)
                    {
                        <text>Currently running @task.ActiveProcess.CreatedUtc.ToHumanString() <span>@task.ActiveProcess.CreatedUtc.Ago() ago</span></text>
                    }
                </x-list-cell>
            </x-list-row>
        }
    </x-list>
} else
{
    <text>
        No tasks listed for this job
    </text>    
}


