@using Wbtb.Core.Common;
@using Wbtb.Core.Web;
@model ProcessPageModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Process log</h1>


@if (Model.ActiveProcesses.Any())
{
    <h3>Active Processes</h3>
    <x-list class="--dense">
    @foreach (DaemonActiveProcess item in Model.ActiveProcesses)
    {
        <x-list-row class="--header">
            <x-list-cell>
                @item.Daemon
            </x-list-cell>
            <x-list-cell>
                @item.Description
            </x-list-cell>
            <x-list-cell>
                @item.CreatedUtc.Ago() ago
            </x-list-cell>
        </x-list-row>
    }
    </x-list>
} 
else
{
    <div>
        No active processes
    </div>
}




<div>
    Filter by : <a href="@Model.BaseUrl?filterby=unprocessed&jobid=@Model.JobId&orderby=@Model.OrderBy">Unprocessed</a>  | <a href="@Model.BaseUrl?filterby=passed&jobid=@Model.JobId&orderby=@Model.OrderBy">Passed</a> | <a href="@Model.BaseUrl?filterby=failed&jobid=@Model.JobId">Failed</a> | <a href="@Model.BaseUrl?filterby=&jobid=@Model.JobId&orderby=@Model.OrderBy">None (show all)</a>
</div>
<div>
    Order by : <a href="@Model.BaseUrl?filterby=@Model.FilterBy&jobid=@Model.JobId&orderby=oldest">Oldest</a> | <a href="@Model.BaseUrl?filterby=@Model.FilterBy&jobid=@Model.JobId&orderby=latestDone">Latest done</a> | <a href="@Model.BaseUrl?filterby=@Model.FilterBy&jobid=@Model.JobId&orderby=">Latest queued</a>
</div>
<div>
    Show for job
    <select class="processLog_jobsFilter">
        <option value="">All jobs</option>
        @foreach(Job job in Model.Jobs)
        {
            <option value="@job.Id" @(job.Id == Model.JobId ? "selected":"")>@job.Name</option>    
        }
    </select>
    <script>
        (()=>{
            const jobsMenu = document.querySelector('.processLog_jobsFilter')
            jobsMenu.addEventListener('change', function () {
                
                const url = new URL(window.location.href)
                url.searchParams.set('jobid', jobsMenu.value)
                window.location = url

            }, false);
        })()
    </script>
</div>


@if (Model.DaemonTasks.Items.Any())
{
    <x-list class="daemonTasks --dense">

        <x-list-row class="--header">
            <x-list-cell>
                Created
            </x-list-cell>
            <x-list-cell>
                Status
            </x-list-cell>
            <x-list-cell>
                Build
            </x-list-cell>
            <x-list-cell>
                Key
                <div class="quiet">
                    Source
                </div>
            </x-list-cell>
            <x-list-cell>
                Result
            </x-list-cell>
        </x-list-row>

        @foreach (ViewDaemonTask task in Model.DaemonTasks.Items)
        {
            <x-list-row>
                <x-list-cell>
                    @task.CreatedUtc.Ago() ago <div class="quiet">(@task.CreatedUtc.ToHumanString())</div>
                    <span class="quiet">Id:@task.Id</span>
                </x-list-cell>
                <x-list-cell>
                    @if (task.ProcessedUtc.HasValue)
                    {
                        @if (!task.HasPassed.Value)
                        {
                            <x-badge class="--danger">Failed</x-badge>
                        }
                        <text>
                            @task.ProcessedUtc.Ago() ago
                            <div class="quiet">(@task.ProcessedUtc.ToHumanString())</div>
                            <div class="quiet">Queued for @((task.ProcessedUtc - task.CreatedUtc).ToHumanString(shorten: true))</div>
                        </text>
                    }
                    else
                    {
                        <text>
                            Pending
                            <div class="quiet">Queued for @((DateTime.UtcNow - task.CreatedUtc).ToHumanString(shorten: true))</div>
                        </text>
                    }
                </x-list-cell>
                <x-list-cell>
                    @ViewHelpers.BuildLink(task.Build)
                </x-list-cell>
                <x-list-cell>
                    @((DaemonTaskTypes)task.Stage)
                    <div class="quiet">
                        @task.Src
                    </div>
                    <div class="quiet">
                        @task.Args
                    </div>
                </x-list-cell>
                <x-list-cell class="quiet">
                    @task.Result
                </x-list-cell>
                @if(task.BlockedProcess != null)
                {
                    <x-list-cell>
                        BLOCKED: 
                        @task.BlockedProcess.Reason
                        for @task.BlockedProcess.CreatedUtc.Ago()
                    </x-list-cell>
                }
            </x-list-row>
        }
    </x-list>
}
else
{
    <text>
        No tasks found.
    </text>

}

@ViewHelpers.PagerBar(Model.BaseUrl, Model.QueryStrings, Model.DaemonTasks, Model.Config)
