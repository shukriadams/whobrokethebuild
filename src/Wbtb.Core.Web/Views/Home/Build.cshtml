@using Wbtb.Core.Common;
@using Wbtb.Core.Web; 
@model BuildPageModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@await Html.PartialAsync("JobBanner", Model.Build.Job)

<h1>Build #@Model.Build.Identifier</h1>
<div data-isBuild />
<x-columns class="--two">
    <x-card class="--stroke --top">
        <x-card-stroke class="--@ViewHelpers.BuildStatusToCSSClass(Model.Build)"></x-card-stroke>
        <x-card-pad>
            <wbtb-labels>

                <wbtb-label>Job</wbtb-label>
                <div><a href="/job/@Model.Build.Job.Id">@Model.Build.Job.Name</a></div>

                <wbtb-label>Status </wbtb-label>
                <x-badge class="--@ViewHelpers.BadgeClassFromBuildStatus(Model.Build.Status)" >@ViewHelpers.TranslateBuildStatus(Model.Build)</x-badge>

                <wbtb-label>Built on </wbtb-label>
                <div>@ViewHelpers.BuildHostLink(Model.Build)</div>

                @if(Model.IncidentCausalBuild != null)
                {
                    <wbtb-label>Breaking build</wbtb-label>
                    <div><a href="/build/@Model.IncidentCausalBuild.Id">@Model.IncidentCausalBuild.Identifier</a></div>
                }

                @if (Model.Build.IncidentBuild != null)
                {
                    <wbtb-label>Broke at</wbtb-label>
                    @if (Model.Build.Id == Model.Build.IncidentBuildId)
                    {
                        <div>here</div>
                    }
                    else
                    {
                        <div>
                            @ViewHelpers.BuildLink(Model.Build.IncidentBuild)
                        </div>
                    }

                    <wbtb-label>Incident</wbtb-label>
                    <div>
                        @ViewHelpers.IncidentLink(Model.Build.IncidentBuild, "View incident")
                    </div>
                }

                @if (Model.BuildBreakers.Any())
                {
                    <wbtb-label>Broken by</wbtb-label>
                    <div>
                        @foreach(User user in Model.BuildBreakers)
                        { 
                            <a href="/user/@user.Id">@user.Name</a>
                        }
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.UrlOnBuildServer))
                {
                    <wbtb-label>View on</wbtb-label>
                    <div><a href="@Model.UrlOnBuildServer">@Model.BuildServer.Name</a></div>
                }
            </wbtb-labels>

        </x-card-pad>
    </x-card>

    <x-card class="--top">
        <x-card-pad>
            <wbtb-labels>

                <wbtb-label>Ran</wbtb-label>
                <div>@Model.Build.StartedUtc.ToHumanString() <span class="quiet">@Model.Build.StartedUtc.Ago() ago</span></div>

                @if (Model.Build.EndedUtc.HasValue)
                {
                    <wbtb-label>Took</wbtb-label>
                    <div>@ViewHelpers.BuildDuration(Model.Build) to complete</div>
                }

                @if (Model.NextBuild != null)
                {
                    <wbtb-label>Next build</wbtb-label>
                    <div><a href="/build/@Model.NextBuild.Id">@Model.NextBuild.Identifier </a> <span class="quiet">@((Model.NextBuild.StartedUtc - Model.Build.StartedUtc).ToHumanString()) later</span></div>
                }

                @if (Model.PreviousBuild != null)
                {
                    <wbtb-label>Prev build</wbtb-label>
                    <div><a href="/build/@Model.PreviousBuild.Id">@Model.PreviousBuild.Identifier </a> <span class="quiet">@((Model.Build.StartedUtc - Model.PreviousBuild.StartedUtc).ToHumanString()) earlier</span></div>
                }

                <wbtb-label>Logs</wbtb-label>
                <div>
                    <a href="/build/log/@Model.Build.Id">Raw build log</a>
                </div>


                <wbtb-label></wbtb-label>
                <div>
                    <a href="/buildProcessLog/@Model.Build.Id">

                        @if (Model.ProcessErrors)
                        {
                            <x-badge class="--danger">ERRORS</x-badge>
                        }else if (Model.ProcessesPending)
                        {
                            <x-badge class="--warning">Pending</x-badge>
                        }else
                        {
                            <text>Processing history</text>
                        }
                    </a>
                </div>

            </wbtb-labels>
        </x-card-pad>
        @if (Model.Common.IsAdmin && Model.IsAlertRetractable)
        {
            <x-card-pad>
                <h4>Admin</h4>
                <button class="button --warning" data-undoAlerts="@Model.Build.Id">Delete alerts</button>
                <p class="quiet">
                    Public alerts have already been sent out for this build. You can delete them here.
                </p>
            </x-card-pad>
        }
    </x-card>
</x-columns>

@if (Model.IncidentReport != null)
{
    <x-card class="buildIncidentReport">
        <x-card-pad>
            <strong>
                @Model.IncidentReport.Summary
            </strong>
            <pre>@Model.IncidentReport.Description</pre>
        </x-card-pad>
    </x-card>
}

<h2>Changes</h2>
<x-list class="buildChanges">

    @if (Model.BuildInvolvements.Any())
    {
        @foreach(ViewBuildInvolvement involvement in this.Model.BuildInvolvements)
        {
            <x-list-rowlayout style="background-color:@ViewHelpers.BlameScoreToColor(involvement.BlameScore)">
                <x-list-cell>
                    <x-columns class="buildChanges-row">
                        <x-column class="buildChanges-avatar">
                            @await Html.PartialAsync("UserAvatar", involvement.MappedUser)
                        </x-column>
                        <x-column class="buildChanges-revision">
                            #@involvement.RevisionCode
                            @if (involvement.Revision != null)
                            {
                                <div class="quiet">
                                    @involvement.Revision.Created.ToHumanString()
                                </div>
                            }
                        </x-column>
                        <x-column>
                            @if (involvement.Revision != null)
                            {
                                <text>
                                    <span class="bold">@involvement.Revision.Description</span>
                                </text>
                            }
                        </x-column>
                    </x-columns>

                    <x-columns>
                        @if (involvement.BlameScore > 0)
                        {
                            <text>This change has a @involvement.BlameScore% chance of having broken the build</text>
                        }

                        @if (involvement.BlameScore == 100)
                        {
                            <text>Broke the build</text>
                        }
                    </x-columns>


                    @if (involvement.Revision != null)
                    {
                        <x-columns>
                            <div class="code">
                                @if (involvement.Revision.Files.Any())
                                {
                                    @foreach (string file in involvement.Revision.Files)
                                    {
                                        <div classs="build-revisionFile build-revisionFile--">@file</div>
                                    }
                                }
                                else
                                {
                                    <text>No file changes found</text>
                                }
                            </div>
                        </x-columns>
                    }

                    @if (!string.IsNullOrEmpty(involvement.Comment))
                    {
                        <div class="code">@involvement.Comment</div>
                    }

                </x-list-cell>
            </x-list-rowlayout>
        }
    }
    else
    {
        <x-list-rowlayout>
            No code change information available for this build.
        </x-list-rowlayout>
    }

    @if (!Model.BuildInvolvements.Any())
    {
        <x-list-rowlayout>
            @if (Model.RevisionsLinkedFromLog)
            {
                <text>
                    No revisions in build. Has import run yet? 
                </text>
            } 
            else 
            { 
                <text>
                    CI server reports no revisions in this build. Build was likely not triggered by a source change.
                </text>
            }

        </x-list-rowlayout>
    }

</x-list>

<h2>Log</h2>

@if (!Model.Build.Job.LogParsers.Any())
{ 
    <div>
        Log parsing is not enabled for this job
    </div>
} 
else
{
    @if (Model.BuildParseResults.Any())
    {
        @foreach(BuildLogParseResult parseResult in Model.BuildParseResults)
        {
            <div class="code">
                <h4>@parseResult.LogParserPlugin</h4>
                <p>
                    @if (string.IsNullOrEmpty(parseResult.ParsedContent))
                    {
                        <text>
                            No matches.
                        </text>
                    }
                    else
                    {
                        @ViewHelpers.String(parseResult.ParsedContent)
                    }
                </p>
            </div>
        }
    }
    else
    {
        <text>
            No log parse results.
        </text>
    }
}

@if (string.IsNullOrEmpty(Model.Build.LogPath))
{
    <div>
        Build log has not yet been retrieved.
    </div>
}
else
{
    <div>
        <a href="/build/log/@Model.Build.Id">View full build log</a>
    </div>
}
      