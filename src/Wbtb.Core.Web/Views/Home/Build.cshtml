@using Wbtb.Core.Common;
@using Wbtb.Core.Web; 
@model BuildPageModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@await Html.PartialAsync("JobBanner", Model.Build.Job)

<h1>Build #@Model.Build.Identifier</h1>
<div data-isBuild />
<x-columns class="--two">
    <x-card class="--stroke --top">
        <x-card-stroke class="--@ViewHelpers.BuildStatusToCSSClass(Model.Build)"></x-card-stroke>
        <x-card-pad>
            Status : @ViewHelpers.TranslateBuildStatus(Model.Build)
            @if(Model.IncidentCausalBuild != null)
            {
                <text>
                    Broken by <a href="/build/@Model.IncidentCausalBuild.Id">@Model.IncidentCausalBuild.Identifier</a>
                </text>
            }

            @if (Model.BuildBreakers.Any())
            {
                <div>
                    Broken by :
                    @foreach(User user in Model.BuildBreakers)
                    { 
                        <a href="/user/@user.Id">@user.Name</a>
                    }
                </div>
            }

        </x-card-pad>
        <x-card-pad>
            Job : <a href="/job/@Model.Build.Job.Id">@Model.Build.Job.Name</a>
        </x-card-pad>
        <x-card-pad>
            Built on : @ViewHelpers.BuildHostLink(Model.Build)
        </x-card-pad>
        <x-card-pad>
            @if (!string.IsNullOrEmpty(Model.UrlOnBuildServer))
            {
                <a href="@Model.UrlOnBuildServer">View on @Model.BuildServer.Name</a>
            }
        </x-card-pad>

        @if(Model.Build.IncidentBuild != null)
        { 
            <x-card-pad>
                @if (Model.Build.Id == Model.Build.IncidentBuildId)
                {
                    <x-badge class="--danger">
                        Build broke here.
                    </x-badge>
                } 
                else 
                { 
                    <text>
                        Break caused by build @ViewHelpers.BuildLink(Model.Build.IncidentBuild)
                    </text>
                }
                <div>
                    @ViewHelpers.IncidentLink(Model.Build.IncidentBuild, "View incident")
                </div>

            </x-card-pad>
        }

    </x-card>
    <x-card class="--top">
        <x-card-pad>
            <h5>Timeline</h5>
            <div>
                Ran @Model.Build.StartedUtc.Ago() ago (@Model.Build.StartedUtc.ToHumanString())
            </div>
            @if (Model.Build.EndedUtc.HasValue)
            {
                <div>
                    Took @ViewHelpers.BuildDuration(Model.Build) to complete
                </div>
            }
        </x-card-pad>
        <x-card-pad>
            @if (Model.PreviousBuild != null)
            {
                <text>
                    Previous build : <a href="/build/@Model.PreviousBuild.Id">@Model.PreviousBuild.Identifier </a> <span class="quiet">(@((Model.Build.StartedUtc - Model.PreviousBuild.StartedUtc).ToHumanString()) before)</span>
                </text>
            }
        </x-card-pad>
        <x-card-pad>
            @if (Model.NextBuild != null)
            {
                <text>
                    Next  build : <a href="/build/@Model.NextBuild.Id">@Model.NextBuild.Identifier </a> <span class="quiet">(@((Model.NextBuild.StartedUtc - Model.Build.StartedUtc).ToHumanString()) later)</span>
                </text>
            }
        </x-card-pad>
        <x-card-pad>
            @if (Model.Common.IsAdmin && Model.IsAlertRetractable)
            {
                <button class="button --warning" data-undoAlerts="@Model.Build.Id">Delete alerts</button>    
                <p class="quiet">
                    Public alerts have already been sent out for this build. You can delete them here.
                </p>
            }
        </x-card-pad>
        <x-card-pad>
            <a href="/buildProcessLog/@Model.Build.Id">Process log 
                @if (Model.ProcessErrors)
                {
                    <x-badge class="--danger">ERRORS</x-badge>
                }
                @if (Model.ProcessesPending)
                {
                    <x-badge class="--warning">Pending</x-badge>
                }
            </a>
        </x-card-pad>
    </x-card>
</x-columns>

        
<h2>Changes</h2>
<x-list class="buildChanges">

    @if (Model.BuildInvolvements.Any())
    {
        @foreach(ViewBuildInvolvement involvement in this.Model.BuildInvolvements)
        {
            <div style="background-color: @ViewHelpers.BlameScoreToColor(involvement.BlameScore)">
                <x-list-row>
                    <x-list-cell>
                        <x-columns class="buildChanges-row">
                            <x-column class="buildChanges-avatar">
                                @await Html.PartialAsync("UserAvatar", involvement.MappedUser)
                            </x-column>
                            <x-column class="buildChanges-revision">
                                #@involvement.RevisionCode
                                @if (involvement.Revision != null)
                                {
                                    <div class="quiet">
                                        @involvement.Revision.Created.ToHumanString()
                                    </div>
                                }
                            </x-column>
                            <x-column>
                                @if (involvement.Revision != null)
                                {
                                    <text>
                                        <span class="bold">@involvement.Revision.Description</span>
                                    </text>
                                }
                            </x-column>
                        </x-columns>
                    </x-list-cell>
                </x-list-row>

                @if (involvement.Revision != null)
                {
                    <x-list-row>
                    <div class="code">
                        @if (involvement.Revision.Files.Any())
                        {
                            @foreach (string file in involvement.Revision.Files)
                            {
                                <div classs="build-revisionFile build-revisionFile--">@file</div>
                            }
                        }
                        else
                        {
                            <text>No file changes found</text>
                        }
                    </div>
                    </x-list-row>
                }

                <x-list-row>
                    <x-list-cell>
                        @if (involvement.BlameScore > 0 && involvement.BlameScore < 0)
                        {
                            <text>This change has a @involvement.BlameScore% chance of having broken the build</text>
                        }

                        @if (involvement.BlameScore == 100)
                        {
                            <text>This change broke the build</text>
                        }
                    </x-list-cell>
                </x-list-row>
            </div>
        }
    }
    else
    {
        <div>
            No code change information available for this build.
        </div>
    }

    @if (!Model.BuildInvolvements.Any())
    {
        <x-list-row>
            @if (Model.RevisionsLinkedFromLog)
            {
                <text>
                    No revisions in build. Has import run yet? 
                </text>
            } 
            else 
            { 
                <text>
                    CI server reports no revisions in this build. Build was likely not triggered by a source change.
                </text>
            }

            </x-list-row>
    }

</x-list>

<h2>Log</h2>

@if (!Model.Build.Job.LogParsers.Any())
{ 
    <div>
        Log parsing is not enabled for this job
    </div>
} 
else
{

    @if (Model.BuildParseResults.Any())
    {
        @foreach(BuildLogParseResult parseResult in Model.BuildParseResults)
        {
            @if(string.IsNullOrEmpty(parseResult.ParsedContent))
            {
                <div class="code">
                    <h4>Parser: @parseResult.LogParserPlugin</h4>
                    <p>
                        No matches.
                    </p>
                </div>
            } 
            else 
            { 
                <div class="code">
                    <h4>Parser: @parseResult.LogParserPlugin</h4>
                    <p>
                        @ViewHelpers.String(parseResult.ParsedContent)
                    </p>
                </div>
            }
        }
    }
    else
    {
        <text>
            No log parse results.
        </text>
    }
}

@if (string.IsNullOrEmpty(Model.Build.LogPath))
{
    <div>
        Build log has not yet been retrieved.
    </div>
}
else
{
    <div>
        <a href="/build/log/@Model.Build.Id">View full build log</a>
    </div>
}
      