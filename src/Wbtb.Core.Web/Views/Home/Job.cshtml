@using Wbtb.Core.Common;
@using Wbtb.Core.Web; 
@using Humanizer;
@model JobPageModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@await Html.PartialAsync("JobBanner", Model.Job)


<x-card class="--stroke @ViewHelpers.BuildStatusToCSSClass(Model.Job.LatestBuild)">
    <x-card-stroke class="--@ViewHelpers.BuildStatusToCSSClass(Model.Job.LatestBuild)"></x-card-stroke>
    <x-card-pad>
    
        @if(!string.IsNullOrEmpty(Model.Job.Description))
        { 
            <div>
                @(Model.Job.Description)
            </div>
        }

        <div>
            @if(Model.Stats.JobDuration.HasValue)
            {
                <text>
                    Has built over @Model.Stats.JobDuration.Value.Humanize(), from @Model.Stats.StartUtc.Value.ToShortDateString().Humanize() to @Model.Stats.LatestBuild.EndedUtc.Value.ToShortDateString().Humanize().
                </text>
            }
        </div>
    
        <div>
            @if (Model.Stats.LatestBreakingBuild!= null){ 
                <text>Last incident was @ViewHelpers.BuildLink(Model.Stats.LatestBreakingBuild), @Model.Stats.LatestBreakingBuild.StartedUtc.Humanize() ago</text>
            }
            @if (Model.Stats.LatestBreakDuration.HasValue){ 
                <text>,and that lasted @Model.Stats.LatestBreakDuration.Value.Humanize()</text>
            }
        </div>
    
        @if(Model.Stats.TotalBuilds == 0)
        { 
            <div>
                Project hasn't built yet.
            </div>
        }

        @if(Model.Stats.TotalBuilds > 0)
        { 
            <div>
                Has built @(Model.Stats.TotalBuilds) times. 
                @if(Model.Stats.FailRatePercent == 0)
                {
                    <text>
                        No fails detected.
                    </text>
                } 

                @if(Model.Stats.FailRatePercent > 0)
                { 
                    <text>
                        Fail rate is @(Model.Stats.FailRatePercent)%, over @Model.Stats.Incidents incidents. Longest passing streak is __ time_unit. Most frequent error cause is ___.
                    </text>
                }
            </div>
            <div>
                Most frequent builders are ___. Builds on X agents, most frequent one is being ___.
            </div>
        }

        @if (Model.Job.BreakBuild != null)
        {
            <text>
                <x-badge class="--danger">Broke</x-badge> @Model.Job.BreakBuild.EndedUtc.Humanize() by 
                @foreach(BuildInvolvement involvement in Model.Job.BreakBuild.BuildInvolvements.Where(r => r.Blame == Blame.Guilty))
                { 
                    @ViewHelpers.BuildInvolvementUserLink(involvement)
                }

                build <a href="/build/@Model.Job.BreakBuild.Id">@Model.Job.BreakBuild.Identifier</a>
            </text>
        }


    </x-card-pad>
</x-card>

<x-content>
    
    <div>
        <a href="/jobsoftreset/@Model.Job.Id">Reset (soft)</a>
    </div>
    <div>
        <a href="/jobhardreset/@Model.Job.Id">Reset (hard)</a>
    </div>
    <div>
        @if(Model.Stats.TotalBuilds > 0)
        { 
            <a href="/incidents/@Model.Job.Id">View incidents</a>
        }
    </div>
</x-content>


@if(Model.Builds.Items.Any())
{
    <x-list class="--dense jobsList">

        @foreach (ViewBuild build in Model.Builds.Items)
        { 
            <x-list-row class="job-buildItem">
                <a class="job-buildTitle" href="/build/@build.Id">
                    <div class="jobsList-statusFlag jobsList-statusFlag--@ViewHelpers.BuildStatusToCSSClass(build)"></div>
                </a>
                <x-list-cell class="jobsList-buildTitle">
                    <div>
                        <a class="job-buildTitle" href="/build/@build.Id">
                            @build.Identifier
                        </a>
                    </div>
                </x-list-cell>
                <x-list-cell class="jobsList-status">
                    <div class="card-status card-status--@ViewHelpers.BuildStatusToCSSClass(build)"></div>
                    <div>
                        @ViewHelpers.TranslateBuildStatus(build) 
                    </div>
                    <div>
                        @build.StartedUtc.ToLocalTime().Humanize() (@build.StartedUtc.ToLocalTime().ToISOShort())
                    </div>
                </x-list-cell>    

                <x-list-cell>
                    @foreach(ViewBuildInvolvement involvement in build.BuildInvolvements)
                    {
                        <li>
                            @involvement.RevisionCode - by 
                            @ViewHelpers.BuildInvolvementUserLink(involvement)
                            @if (involvement.Revision != null)
                            { 
                                @ViewHelpers.GistOf(involvement.Revision.Description, 20, "...") 
                            }
                        </li>
                    }
                </x-list-cell>
            </x-list-row>
        }
    </x-list>
}



@ViewHelpers.PagerBar(Model.BaseUrl, Model.Builds, Model.Config)
