@using Wbtb.Core.Common;
@using Wbtb.Core.Web; 
@using Humanizer;
@model JobPageModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@await Html.PartialAsync("JobBanner", Model.Job)

<x-content>
    <x-columns class="--two-one">
        <x-card class="--stroke @ViewHelpers.BuildStatusToCSSClass(Model.Job.LatestBuild)">
            <x-card-stroke class="--@ViewHelpers.BuildStatusToCSSClass(Model.Job.DeltaBuild)"></x-card-stroke>
            <x-card-pad>
                @if (!string.IsNullOrEmpty(Model.Job.Description))
                {
                    <div>
                        @(Model.Job.Description)
                    </div>
                }

                <div>
                    @if (Model.Stats.JobDuration.HasValue)
                    {
                        <text>
                            Has built over @Model.Stats.JobDuration.Value.Humanize(), from @Model.Stats.StartUtc.ToShort() to @Model.Stats.LatestBuild.EndedUtc.ToShort()
                        </text>
                    }
                </div>

                <div>
                    @if (Model.Stats.LatestBreakingBuild != null)
                    {
                        <text>
                            Last incident was @ViewHelpers.BuildLink(Model.Stats.LatestBreakingBuild) 
                            @Model.Stats.LatestBreakingBuild.EndedUtc.ToShort()
                        </text>
                    }

                    @if (Model.Stats.LatestBreakDuration.HasValue)
                    {
                        <text>,and that lasted @Model.Stats.LatestBreakDuration.Value.Humanize()</text>
                    }
                </div>

                @if (Model.Stats.TotalBuilds == 0)
                {
                    <div>
                        Project hasn't built yet.
                    </div>
                }

                @if (Model.Stats.TotalBuilds > 0)
                {
                    <div>
                        Has built @(Model.Stats.TotalBuilds) times.
                    </div>
                    <div>
                        @if (Model.Stats.FailRatePercent == 0)
                        {
                            <text>
                                No fails detected.
                            </text>
                        }

                        @if (Model.Stats.FailRatePercent > 0)
                        {
                            <text>
                                Fail rate is @(Model.Stats.FailRatePercent)%.
                            </text>
                        }
                    </div>
                }
            </x-card-pad>
        </x-card>
        <x-card>
            <x-card-pad>
                <div>
                    Incidents : 
                    @if (Model.Stats.Incidents == 0)
                    {
                        <text>
                            None
                        </text>
                    } else {
                        <a href="/incidents/@Model.Job.Id">@Model.Stats.Incidents</a>
                    }
                </div>
                
                @if (Model.Job.Message.Any())
                {
                    <text>
                        <h5>Alerts</h5>
                        @foreach (MessageHandler message in Model.Job.Message)
                        {
                            <div>
                                @message.Group via @message.Plugin
                            </div>
                        }
                    </text>
                }

                <h5>Log parsers</h5>
                @if (Model.Job.LogParserPlugins.Any())
                {
                    <text>
                        <ul>
                            @foreach (string logParser in Model.Job.LogParserPlugins)
                            {
                                <li>
                                    @logParser
                                </li>
                            }
                        </ul>
                    </text>
                }
                else
                {
                    <text>
                        none
                    </text>
                }
            </x-card-pad>
        </x-card>
    </x-columns>
</x-content>

<x-content>
    @if(Model.Builds.Items.Any())
    {
        <x-list class="--dense jobsList">

            @foreach (ViewBuild build in Model.Builds.Items)
            {
                <x-list-row>
                    <x-list-cell class="jobsList-statusFlagContainer">
                        <a class="job-buildTitle" href="/build/@build.Id">
                            <div class="jobsList-statusFlag jobsList-statusFlag--@ViewHelpers.BuildStatusToCSSClass(build)"></div>
                        </a>
                    </x-list-cell> 
                    <x-list-cell class="jobsList-buildTitle">
                        <div>
                            <a class="job-buildTitle" href="/build/@build.Id">
                                @build.Identifier
                            </a>
                        </div>
                    </x-list-cell>
                    <x-list-cell class="jobsList-status">
                        <div class="card-status card-status--@ViewHelpers.BuildStatusToCSSClass(build)"></div>
                        <div>
                            @ViewHelpers.TranslateBuildStatus(build) 
                        </div>
                        <div>
                            @build.VisibleDateUtc.Ago() (@build.VisibleDateUtc.ToLocalTime().ToISOShort())
                        </div>
                    </x-list-cell>    

                    <x-list-cell>
                        @foreach(ViewBuildInvolvement involvement in build.BuildInvolvements)
                        {
                            <li>
                                @involvement.RevisionCode - by 
                                @ViewHelpers.BuildInvolvementUserLink(involvement)
                                @if (involvement.Revision != null)
                                { 
                                    @ViewHelpers.GistOf(involvement.Revision.Description, 20, "...") 
                                }
                            </li>
                        }
                    </x-list-cell>
                </x-list-row>
            }
        </x-list>
    }
</x-content>

@ViewHelpers.PagerBar(Model.BaseUrl, string.Empty, Model.Builds, Model.Config)
